name: Sync App Version

on:
  push:
    branches: [ main, master ]
    paths:
      - 'js/version.js' # Chỉ chạy khi version.js thay đổi

jobs:
  sync-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # ✅ Thêm quyền write cho contents
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # ✅ Cập nhật lên v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0 # ✅ Fetch full history

    - name: Verify files exist
      run: |
        echo "🔍 Checking if required files exist..."
        
        if [ ! -f "js/version.js" ]; then
          echo "❌ js/version.js not found!"
          exit 1
        fi
        
        # Bỏ qua kiểm tra js/utils.js vì chúng ta không sửa nó nữa
        # if [ ! -f "js/utils.js" ]; then
        #   echo "❌ js/utils.js not found!"
        #   exit 1
        # fi
        
        if [ ! -f "manifest.json" ]; then
          echo "❌ manifest.json not found!"
          exit 1
        fi
        
        echo "✅ All required files exist for version syncing (version.js, manifest.json)"

    - name: Extract and sync version
      run: |
        VERSION_FILE="js/version.js"
        # UTILS_FILE="js/utils.js" # Không cần biến này nữa
        MANIFEST_FILE="manifest.json"
        
        echo "📂 Working directory: $(pwd)"
        echo "📋 Files in js/:"
        ls -la js/ || echo "js/ directory not found"
        
        # Đọc nội dung file version.js
        echo "📖 Content of $VERSION_FILE:"
        cat "$VERSION_FILE"
        
        # Trích xuất phiên bản với nhiều pattern khác nhau
        echo "🔍 Extracting version..."
        
        # Thử pattern 1: const APP_VERSION = '1.2.3';
        NEW_VERSION=$(grep -E "const APP_VERSION = '[0-9]+\.[0-9]+\.[0-9]+'" "$VERSION_FILE" | sed -E "s/.*'([0-9]+\.[0-9]+\.[0-9]+)'.*/\1/" | head -1)
        
        # Nếu không tìm thấy, thử pattern 2: const APP_VERSION = "1.2.3";
        if [ -z "$NEW_VERSION" ]; then
          NEW_VERSION=$(grep -E 'const APP_VERSION = "[0-9]+\.[0-9]+\.[0-9]+"' "$VERSION_FILE" | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/' | head -1)
        fi
        
        # Nếu vẫn không tìm thấy, thử pattern 3: APP_VERSION = '1.2.3'
        if [ -z "$NEW_VERSION" ]; then
          NEW_VERSION=$(grep -E "APP_VERSION = '[0-9]+\.[0-9]+\.[0-9]+'" "$VERSION_FILE" | sed -E "s/.*'([0-9]+\.[0-9]+\.[0-9]+)'.*/\1/" | head -1)
        fi
        
        if [ -z "$NEW_VERSION" ]; then
          echo "❌ Không thể trích xuất version từ $VERSION_FILE"
          echo "📋 Nội dung file:"
          cat "$VERSION_FILE"
          exit 1
        fi
        
        echo "✅ Extracted version: $NEW_VERSION"
        
        # Backup manifest.json trước khi thay đổi
        cp "$MANIFEST_FILE" "${MANIFEST_FILE}.backup"
        echo "💾 Backed up manifest.json"
        
        # Bỏ qua việc cập nhật utils.js
        echo "ℹ️ Skipping update for js/utils.js as version is handled internally by the app logic."
        
        # Cập nhật manifest.json
        echo "🔧 Updating $MANIFEST_FILE..."
        
        # Sử dụng jq nếu có
        if command -v jq &> /dev/null; then
          jq ".version = \"$NEW_VERSION\"" "$MANIFEST_FILE" > "${MANIFEST_FILE}.tmp" && mv "${MANIFEST_FILE}.tmp" "$MANIFEST_FILE"
          echo "✅ Updated manifest.json using jq"
        else
          # Fallback với sed
          sed -i -E "s/(\"version\":[ ]*\")[0-9]+\.[0-9]+\.[0-9]+(\")/\1$NEW_VERSION\2/" "$MANIFEST_FILE"
          echo "✅ Updated manifest.json using sed"
        fi
        
        # Kiểm tra thay đổi manifest.json
        echo "🔍 Checking changes for manifest.json..."
        if ! diff "$MANIFEST_FILE" "${MANIFEST_FILE}.backup" > /dev/null 2>&1; then
          echo "✅ manifest.json has been changed"
        else
          echo "ℹ️ manifest.json unchanged"
        fi
        
        # Lưu version vào environment
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # Kiểm tra git config
        echo "📋 Git config:"
        git config --get user.email
        git config --get user.name

    - name: Commit and push changes
      run: |
        echo "📋 Git status before adding files:"
        git status
        
        # Add chỉ manifest.json nếu nó thay đổi
        git add manifest.json
        
        echo "📋 Git status after adding files:"
        git status
        
        # Kiểm tra xem có thay đổi không
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit for manifest.json"
          # Nếu không có thay đổi nào cả (kể cả utils.js trước đó nếu có), thì có thể thoát ở đây
          # Tuy nhiên, vì chúng ta chỉ add manifest.json, nên điều kiện này là đủ
          exit 0
        fi
        
        # Commit với message rõ ràng
        COMMIT_MSG="🔄 Auto-sync manifest.json version to ${{ env.NEW_VERSION }} from js/version.js
        
        - Updated manifest.json
        
        [skip ci]"
        
        git commit -m "$COMMIT_MSG"
        
        echo "✅ Changes committed successfully"
        
        # Push với retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "🚀 Attempting to push... (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
          
          if git push origin HEAD; then
            echo "✅ Push successful!"
            break
          else
            echo "❌ Push failed, retrying in 5 seconds..."
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "❌ Push failed after $MAX_RETRIES attempts"
              exit 1
            fi
            
            # Pull latest changes trước khi retry
            echo "🔄 Pulling latest changes..."
            git pull --rebase origin HEAD || true
          fi
        done

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "🧹 Cleaning up on failure..."
        
        # Restore backup manifest.json nếu có
        if [ -f "manifest.json.backup" ]; then
          mv "manifest.json.backup" "manifest.json"
          echo "↩️ Restored manifest.json from backup"
        fi
        
        # Reset git changes
        git reset --hard HEAD
        echo "🔄 Reset git changes"

    - name: Summary
      if: success()
      run: |
        echo "🎉 Version sync completed successfully for manifest.json!"
        echo "📦 New version: ${{ env.NEW_VERSION }}"
        echo "📝 Files updated:"
        echo "  - manifest.json"
        echo ""
        echo "🔗 Commit: $(git rev-parse HEAD)"
