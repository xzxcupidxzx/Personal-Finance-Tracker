// ===== FILE 1: manifest.json - C·∫≠p nh·∫≠t shortcuts m·ªõi =====
{
  "name": "Qu·∫£n L√Ω T√†i Ch√≠nh",
  "short_name": "T√†i Ch√≠nh", 
  "description": "·ª®ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3b82f6",
  "icons": [
    {
      "src": "./LogoFinance.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ],
  "shortcuts": [
    {
      "name": "üí∞ Th√™m Thu Nh·∫≠p",
      "short_name": "Thu",
      "description": "Th√™m giao d·ªãch thu nh·∫≠p nhanh",
      "url": "/quick-add.html?action=income&source=shortcut",
      "icons": [
        {
          "src": "./LogoFinance.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "üí∏ Th√™m Chi Ti√™u", 
      "short_name": "Chi",
      "description": "Th√™m giao d·ªãch chi ti√™u nhanh",
      "url": "/quick-add.html?action=expense&source=shortcut",
      "icons": [
        {
          "src": "./LogoFinance.png", 
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "‚ÜîÔ∏è Chuy·ªÉn Ti·ªÅn",
      "short_name": "Chuy·ªÉn",
      "description": "T·∫°o giao d·ªãch chuy·ªÉn ti·ªÅn",
      "url": "/quick-add.html?action=transfer&source=shortcut", 
      "icons": [
        {
          "src": "./LogoFinance.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "üìä Xem Th·ªëng K√™",
      "short_name": "Stats", 
      "description": "Xem b√°o c√°o t√†i ch√≠nh nhanh",
      "url": "/?tab=statistics&source=shortcut",
      "icons": [
        {
          "src": "./LogoFinance.png",
          "sizes": "96x96"
        }
      ]
    }
  ]
}

// ===== FILE 2: sw.js - C·∫≠p nh·∫≠t version =====
const APP_VERSION = '1.0.3'; // TƒÇNG VERSION
const CACHE_NAME = `finance-app-v${APP_VERSION}`;

// Th√™m manifest.json v√†o cache ƒë·ªÉ ƒë·∫£m b·∫£o shortcut ƒë∆∞·ª£c update
const urlsToCache = [
  '/',
  '/index.html',
  '/quick-add.html',
  '/styles.css',
  '/js/utils.js',
  '/js/app.js',
  '/js/categories.js',
  '/js/settings.js',
  '/js/transactions.js',
  '/js/history.js',
  '/js/statistics.js',
  '/LogoFinance.png',
  '/manifest.json' // QUAN TR·ªåNG: Cache manifest m·ªõi
];

// Th√™m logic x·ª≠ l√Ω shortcut tracking
self.addEventListener('fetch', event => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') return;
  if (url.origin !== location.origin) return;

  // üÜï Track shortcut usage
  if (url.searchParams.get('source') === 'shortcut') {
    console.log('üìä Shortcut used:', url.searchParams.get('action'));
    
    // Optional: Send analytics to your server
    // fetch('/api/analytics/shortcut', {
    //   method: 'POST',
    //   body: JSON.stringify({
    //     action: url.searchParams.get('action'),
    //     timestamp: Date.now()
    //   })
    // }).catch(() => {}); // Silent fail
  }

  // Rest of fetch handling...
  if (request.mode === 'navigate' || request.headers.get('accept').includes('text/html')) {
    event.respondWith(
      fetch(request)
        .then(response => {
          const responseToCache = response.clone();
          caches.open(CACHE_NAME).then(cache => {
            cache.put(request, responseToCache);
          });
          return response;
        })
        .catch(() => caches.match(request))
    );
    return;
  }

  // Cache first for assets
  event.respondWith(
    caches.match(request)
      .then(response => {
        if (response) return response;
        return fetch(request).then(response => {
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          const responseToCache = response.clone();
          caches.open(CACHE_NAME).then(cache => {
            cache.put(request, responseToCache);
          });
          return response;
        });
      })
  );
});

// ===== FILE 3: js/utils.js - C·∫≠p nh·∫≠t UpdateManager =====
Utils.UpdateManager = {
    currentVersion: '1.0.3', // SYNC V·ªöI SW.JS
    swRegistration: null,
    isUpdateAvailable: false,
    isRefreshing: false,

    // ... existing code ...

    /**
     * üÜï Ki·ªÉm tra v√† update shortcut availability
     */
    async checkShortcutSupport() {
        try {
            if ('getInstalledRelatedApps' in navigator) {
                const relatedApps = await navigator.getInstalledRelatedApps();
                console.log('üì± Installed PWA apps:', relatedApps);
                
                // Check if shortcuts are supported
                if ('shortcuts' in navigator) {
                    console.log('‚úÖ Shortcuts supported');
                    return true;
                } else {
                    console.log('‚ùå Shortcuts not supported');
                    return false;
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Could not check shortcut support:', error);
        }
        return false;
    },

    /**
     * üÜï Force update manifest and shortcuts
     */
    async updateManifest() {
        try {
            // Force reload manifest
            const manifestResponse = await fetch('/manifest.json?v=' + Date.now());
            if (manifestResponse.ok) {
                console.log('‚úÖ Manifest updated');
                
                // Trigger SW update to cache new manifest
                if (this.swRegistration) {
                    await this.swRegistration.update();
                }
                
                Utils.UIUtils.showMessage('üì± Widget shortcuts ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'success');
                return true;
            }
        } catch (error) {
            console.error('‚ùå Failed to update manifest:', error);
        }
        return false;
    }
};

// ===== FILE 4: quick-add.html - Enhanced shortcut handling =====
// Th√™m v√†o script section c·ªßa quick-add.html:

// üÜï Enhanced URL params handling v·ªõi shortcut tracking
function handleURLParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const action = urlParams.get('action');
    const source = urlParams.get('source');
    
    console.log('üì± Quick-add opened:', { action, source });
    
    // Track shortcut usage
    if (source === 'shortcut') {
        trackShortcutUsage(action);
        
        // Show shortcut-specific welcome message
        showShortcutWelcome(action);
    }
    
    if (action) {
        const typeMap = {
            'income': 'Thu',
            'expense': 'Chi', 
            'transfer': 'Transfer'
        };
        
        if (typeMap[action]) {
            currentType = typeMap[action];
            
            // Update UI
            document.querySelectorAll('.type-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.type === currentType);
            });
            
            const categoryField = document.getElementById('category-field');
            if (currentType === 'Transfer') {
                categoryField.style.display = 'none';
                document.getElementById('quick-category').removeAttribute('required');
            }
            
            // Auto-focus amount for better UX
            setTimeout(() => {
                document.getElementById('quick-amount').focus();
            }, 500);
        }
    }
}

// üÜï Track shortcut usage
function trackShortcutUsage(action) {
    try {
        // Save to localStorage for analytics
        const shortcutStats = JSON.parse(localStorage.getItem('shortcut_stats') || '{}');
        const today = new Date().toISOString().split('T')[0];
        
        if (!shortcutStats[today]) {
            shortcutStats[today] = {};
        }
        
        shortcutStats[today][action] = (shortcutStats[today][action] || 0) + 1;
        
        localStorage.setItem('shortcut_stats', JSON.stringify(shortcutStats));
        
        console.log('üìä Shortcut tracked:', action, shortcutStats[today][action]);
    } catch (error) {
        console.error('Failed to track shortcut usage:', error);
    }
}

// üÜï Show shortcut-specific welcome
function showShortcutWelcome(action) {
    const messages = {
        'income': 'üí∞ S·∫µn s√†ng ghi nh·∫≠n thu nh·∫≠p!',
        'expense': 'üí∏ Nhanh ch√≥ng ghi l·∫°i chi ti√™u!',
        'transfer': '‚ÜîÔ∏è Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn ngay!'
    };
    
    const message = messages[action] || 'üí∞ Th√™m giao d·ªãch nhanh!';
    
    // Update header
    const title = document.querySelector('.quick-title');
    if (title) {
        title.textContent = message;
    }
    
    // Show brief notification
    setTimeout(() => {
        if (window.navigator && window.navigator.vibrate) {
            window.navigator.vibrate(50); // Haptic feedback
        }
    }, 200);
}

// ===== FILE 5: index.html - Update manifest link =====
// Trong <head> section, c·∫≠p nh·∫≠t:
<link rel="manifest" href="./manifest.json?v=1.0.3">

// V√† th√™m cache busting cho SW:
<script>
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('./sw.js?v=1.0.3')
            .then(function(registration) {
                console.log('‚úÖ SW registered:', registration.scope);
                
                // üÜï Check for shortcut support
                if (window.FinancialApp && window.FinancialApp.updateManager) {
                    window.FinancialApp.updateManager.checkShortcutSupport();
                }
            })
            .catch(function(error) {
                console.log('‚ùå SW registration failed:', error);
            });
    });
}
</script>

// ===== DEPLOYMENT CHECKLIST =====
/*
1. ‚úÖ Update APP_VERSION trong sw.js (1.0.2 ‚Üí 1.0.3)
2. ‚úÖ Update currentVersion trong utils.js 
3. ‚úÖ Modify shortcuts trong manifest.json
4. ‚úÖ Add cache busting (?v=1.0.3) trong HTML
5. ‚úÖ Enhanced shortcut tracking trong quick-add.html
6. ‚úÖ Test URL params ho·∫°t ƒë·ªông ƒë√∫ng
7. ‚úÖ Deploy to√†n b·ªô l√™n server
8. ‚úÖ Test tr√™n real device (iOS + Android)
9. ‚úÖ Verify auto-update notification
10. ‚úÖ Test t·ª´ng shortcut widget
*/