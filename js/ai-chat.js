/**
 * ===================================================================
 * AI CHAT MODULE - PHI√äN B·∫¢N C·ªê ƒê·ªäNH (FIXED POSITION)
 *
 * T·ªëi ∆∞u h√≥a:
 * - Lo·∫°i b·ªè ho√†n to√†n logic k√©o-th·∫£ (drag-and-drop).
 * - Icon ƒë∆∞·ª£c ƒë·ªãnh v·ªã b·∫±ng CSS, JavaScript ch·ªâ x·ª≠ l√Ω vi·ªác m·ªü/ƒë√≥ng chat.
 * - M√£ ngu·ªìn nh·∫π h∆°n, kh√¥ng c√≤n c√°c t√≠nh to√°n v·ªã tr√≠ ph·ª©c t·∫°p.
 * ===================================================================
 */
class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {};
        this.chatHistory = [];
        this.storageKey = 'ai_chat_history';
    }

    init() {
        if (!this.initializeElements()) {
            console.error("AI Chat: Kh√¥ng t√¨m th·∫•y c√°c element HTML c·∫ßn thi·∫øt. Module s·∫Ω kh√¥ng ch·∫°y.");
            return;
        }
        this.setupEventListeners();
        this.loadChatHistory();
        console.log('ü§ñ AI Chat Module Initialized (Fixed Position Edition)');
    }

    initializeElements() {
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            // C√°c element kh√°c cho menu n·∫øu b·∫°n c√≥ (optionsBtn, optionsMenu, etc.)
        };
        return this.elements.fab && this.elements.modal;
    }

    setupEventListeners() {
        const { fab, closeBtn, sendBtn, input, modal } = this.elements;

        // Ch·ªâ c·∫ßn m·ªôt s·ª± ki·ªán 'click' ƒë∆°n gi·∫£n ƒë·ªÉ m·ªü chat
        fab.addEventListener('click', () => this.openChat());

        // C√°c s·ª± ki·ªán cho modal v√† chat
        closeBtn.addEventListener('click', () => this.closeChat());
        modal.addEventListener('click', (e) => {
            if (e.target === modal) this.closeChat();
        });
        sendBtn.addEventListener('click', () => this.sendMessage());
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // N·∫øu c√≥ menu, h√£y g·ªçi h√†m kh·ªüi t·∫°o menu ·ªü ƒë√¢y
        // this.initializeOptionsMenu();
    }

    openChat() {
        const { modal, input } = this.elements;
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.add('visible');
            if(input) input.focus();
        }, 10);
    }

    closeChat() {
        const { modal } = this.elements;
        modal.classList.remove('visible');
        setTimeout(() => {
            modal.style.display = 'none';
        }, 400); // Ch·ªù hi·ªáu ·ª©ng tr∆∞·ª£t xu·ªëng ho√†n t·∫•t
    }

    // C√°c h√†m nh∆∞ initializeOptionsMenu, loadChatHistory, sendMessage...
    // c√≥ th·ªÉ gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc c·ªßa b·∫°n.
    
    loadChatHistory() {
        try {
            const savedHistory = localStorage.getItem(this.storageKey);
            this.chatHistory = savedHistory ? JSON.parse(savedHistory) : [];
        } catch (error) {
            this.chatHistory = [];
        }
        this.renderChatHistory();
    }
    
    saveChatHistory() {
        localStorage.setItem(this.storageKey, JSON.stringify(this.chatHistory));
    }

    renderChatHistory() {
        const historyContainer = this.elements.history;
        historyContainer.innerHTML = '';
        if (this.chatHistory.length === 0) {
            this.addMessage("Xin ch√†o! B·∫°n ƒë√£ chi ti√™u nh·ªØng g√¨ h√¥m nay? H√£y cho t√¥i bi·∫øt, v√≠ d·ª•: \"c√† ph√™ 50k b·∫±ng ti·ªÅn m·∫∑t\"", 'bot', false);
        } else {
            this.chatHistory.forEach(msg => this.addMessage(msg.text, msg.sender, false));
        }
    }
    
    addMessage(text, sender, shouldSave = true) {
        if (shouldSave) {
            this.chatHistory.push({ text, sender });
            this.saveChatHistory();
        }
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            // ƒê·ªãnh d·∫°ng markdown c∆° b·∫£n
            let formattedText = text
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>');
            messageDiv.innerHTML = formattedText;
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;
        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;
        const loadingMessage = this.addMessage('', 'loading', false);
        try {
            // Gi·∫£ l·∫≠p API call
            setTimeout(() => {
                loadingMessage.remove();
                const aiResponse = `ƒê√£ hi·ªÉu: * **Lo·∫°i:** Chi ti√™u * **S·ªë ti·ªÅn:** 50,000 ‚Ç´ * **H·∫°ng m·ª•c:** C√† ph√™ (G·ª£i √Ω) * **T√†i kho·∫£n:** Ti·ªÅn m·∫∑t (G·ª£i √Ω) * **M√¥ t·∫£:** C√† ph√™`;
                this.addMessage(aiResponse, 'bot');
                this.elements.input.disabled = false;
                this.elements.sendBtn.disabled = false;
                this.elements.input.focus();
            }, 1200);
        } catch (error) {
            loadingMessage.remove();
            this.addMessage("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.", 'bot');
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
        }
    }
}