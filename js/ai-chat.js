class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
        };
    }

    init() {
        if (!this.elements.fab) return;
        this.elements.fab.addEventListener('click', () => this.openChat());
        this.elements.closeBtn.addEventListener('click', () => this.closeChat());
        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this.closeChat();
        });
        console.log('ü§ñ AI Chat Module Initialized for Google Gemini');
    }

    openChat() {
        if (!this.elements.modal) return;
        this.elements.modal.style.display = 'flex';
        setTimeout(() => {
            this.elements.modal.classList.add('visible');
            this.elements.input.focus();
        }, 10);
    }

    closeChat() {
        if (!this.elements.modal) return;
        this.elements.modal.classList.remove('visible');
        setTimeout(() => {
            this.elements.modal.style.display = 'none';
        }, 400); // kh·ªõp v·ªõi th·ªùi gian transition trong CSS
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
             messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            messageDiv.textContent = text;
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;

        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        const loadingMessage = this.addMessage('', 'loading');

        try {
            const incomeCategories = this.app.data.incomeCategories.map(c => c.value);
            const expenseCategories = this.app.data.expenseCategories.map(c => c.value);
            const accounts = this.app.data.accounts.map(a => a.value);

            const parsedData = await this.callLLMAPI(userInput, incomeCategories, expenseCategories, accounts);

            loadingMessage.remove();
            
            let confirmationText = `OK! T√¥i ƒë√£ ghi nh·∫≠n:\n- Lo·∫°i: ${parsedData.type}\n- S·ªë ti·ªÅn: ${Utils.CurrencyUtils.formatCurrency(parsedData.amount)}\n`;
            if (parsedData.type === 'Transfer') {
                confirmationText += `- T·ª´: ${parsedData.account}\n- ƒê·∫øn: ${parsedData.toAccount}`;
            } else {
                confirmationText += `- H·∫°ng m·ª•c: ${parsedData.category}\n- T√†i kho·∫£n: ${parsedData.account}`;
            }
            confirmationText += `\n- M√¥ t·∫£: "${parsedData.description}"`;
            this.addMessage(confirmationText, 'bot');
            
            this.ensureAccountExists(parsedData.account);
            if(parsedData.type === 'Transfer') {
                this.ensureAccountExists(parsedData.toAccount);
            } else {
                this.ensureCategoryExists(parsedData.category, parsedData.type);
            }

            const success = this.app.addTransaction(parsedData);
            if (success) {
                this.app.refreshAllModules();
                // X√ìA HO·∫∂C V√î HI·ªÜU H√ìA D√íNG N√ÄY ƒê·ªÇ CHATBOX KH√îNG T·ª∞ ƒê·ªòNG ƒê√ìNG
                // setTimeout(() => this.closeChat(), 2500); 
            }
        } catch (error) {
            console.error("L·ªói x·ª≠ l√Ω AI:", error);
            loadingMessage.remove();
            this.addMessage(`R·∫•t ti·∫øc, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i API Key v√† c√†i ƒë·∫∑t Billing tr√™n Google Cloud.`, 'bot');
        }
    }
    
    ensureAccountExists(accountName) {
        if (!this.app.data.accounts.some(acc => acc.value.toLowerCase() === accountName.toLowerCase())) {
            this.app.data.accounts.push({ value: accountName, text: accountName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    ensureCategoryExists(categoryName, type) {
        const targetArray = type === 'Thu' ? this.app.data.incomeCategories : this.app.data.expenseCategories;
        if (!targetArray.some(cat => cat.value.toLowerCase() === categoryName.toLowerCase())) {
            targetArray.push({ value: categoryName, text: categoryName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    async callLLMAPI(userInput, incomeCategories, expenseCategories, accounts) {
        // !!! THAY B·∫∞NG URL WORKER C·ª¶A B·∫†N !!!
        // B·∫°n c√≥ th·ªÉ t√¨m th·∫•y URL n√†y tr√™n trang qu·∫£n l√Ω Worker c·ªßa Cloudflare
        const PROXY_URL = 'https://deepseek.hoangthaison2812.workers.dev'; 

        // X√ìA HO√ÄN TO√ÄN D√íNG CH·ª®A API_KEY

        const response = await fetch(PROXY_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                // Ch·ªâ g·ª≠i c√°c d·ªØ li·ªáu c·∫ßn thi·∫øt cho Worker
                userInput: userInput,
                incomeCategories: incomeCategories,
                expenseCategories: expenseCategories,
                accounts: accounts
            })
        });

        if (!response.ok) {
            console.error("API Error Response:", await response.text());
            throw new Error('L·ªói khi g·ªçi Google Gemini API qua proxy.');
        }
        
        const data = await response.json();
        const jsonString = data.candidates[0].content.parts[0].text;

        try {
            return JSON.parse(jsonString);
        } catch (e) {
            console.error("L·ªói ph√¢n t√≠ch JSON t·ª´ AI:", jsonString);
            throw new Error("AI ƒë√£ tr·∫£ v·ªÅ m·ªôt ƒë·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá.");
        }
    }
}