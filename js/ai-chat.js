/**
 * ===================================================================
 * AI CHAT MODULE - PHI√äN B·∫¢N T·ªêI ∆ØU H√ìA TO√ÄN DI·ªÜN
 *
 * C·∫£i ti·∫øn ch√≠nh:
 * - Logic k√©o-th·∫£ m∆∞·ª£t m√† h∆°n b·∫±ng `requestAnimationFrame` v√† `transform`.
 * - TƒÉng k√≠ch th∆∞·ªõc n√∫t FAB v√† c·∫£i thi·ªán ph·∫£n h·ªìi c·∫£m ·ª©ng.
 * - Th√™m class `.is-dragging` ƒë·ªÉ ki·ªÉm so√°t hi·ªáu ·ª©ng CSS khi k√©o.
 * - T·ªëi ∆∞u h√≥a vi·ªác hi·ªÉn th·ªã modal d·∫°ng "Bottom Sheet".
 * - Gi·ªØ nguy√™n c√°c ch·ª©c nƒÉng c·ªët l√µi: l∆∞u/t·∫£i l·ªãch s·ª≠ chat, menu t√πy ch·ªçn.
 * ===================================================================
 */
class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {};
        this.chatHistory = [];
        this.storageKey = 'ai_chat_history';

        // === Tr·∫°ng th√°i k√©o-th·∫£ ===
        this.isDragging = false;
        this.wasDragged = false;
        this.dragThreshold = 5; // Ng∆∞·ª°ng pixel ƒë·ªÉ x√°c ƒë·ªãnh l√† k√©o thay v√¨ nh·∫•n

        // T·ªça ƒë·ªô hi·ªán t·∫°i c·ªßa n√∫t FAB
        this.fabX = 0;
        this.fabY = 0;

        // T·ªça ƒë·ªô b·∫Øt ƒë·∫ßu c·ªßa con tr·ªè so v·ªõi n√∫t FAB
        this.dragStartX = 0;
        this.dragStartY = 0;

        this.animationFrameId = null;
        this.fabPositionStorageKey = 'ai_chat_fab_position';
    }

    /**
     * Kh·ªüi t·∫°o module
     */
    init() {
        if (!this.initializeElements()) {
            console.error("AI Chat Module: Kh√¥ng th·ªÉ kh·ªüi t·∫°o v√¨ thi·∫øu c√°c element c·∫ßn thi·∫øt.");
            return;
        }

        this.bindEventHandlers();
        this.initializeEventListeners();
        this.loadChatHistory();
        this.loadFabPosition();

        console.log('ü§ñ AI Chat Module Initialized (Optimized Version)');
    }

    /**
     * L·∫•y v√† ki·ªÉm tra c√°c element c·∫ßn thi·∫øt t·ª´ DOM
     */
    initializeElements() {
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            optionsBtn: document.getElementById('ai-chat-options-btn'),
            optionsMenu: document.getElementById('ai-chat-options-menu'),
            deleteLogBtn: document.getElementById('ai-chat-delete-log'),
            copyLogBtn: document.getElementById('ai-chat-copy-log'),
            overlay: document.getElementById('ai-chat-overlay')
        };
        // Ki·ªÉm tra c√°c ph·∫ßn t·ª≠ quan tr·ªçng
        return this.elements.fab && this.elements.modal && this.elements.input;
    }

    /**
     * T·∫°o c√°c phi√™n b·∫£n "bound" c·ªßa c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán
     */
    bindEventHandlers() {
        this.boundFabDragStart = this.fabDragStart.bind(this);
        this.boundFabDragMove = this.fabDragMove.bind(this);
        this.boundFabDragEnd = this.fabDragEnd.bind(this);
        this.boundSendMessage = this.sendMessage.bind(this);
        this.boundCloseChat = this.closeChat.bind(this);
        this.boundHandleModalClick = this.handleModalClick.bind(this);
        this.boundHandleEnterKey = this.handleEnterKey.bind(this);
    }

    /**
     * G√°n c√°c s·ª± ki·ªán cho element
     */
    initializeEventListeners() {
        const { fab, closeBtn, sendBtn, input, modal } = this.elements;

        // S·ª± ki·ªán k√©o-th·∫£ cho FAB
        fab.addEventListener('pointerdown', this.boundFabDragStart);
        document.addEventListener('pointermove', this.boundFabDragMove);
        document.addEventListener('pointerup', this.boundFabDragEnd);

        // S·ª± ki·ªán trong modal chat
        closeBtn.addEventListener('click', this.boundCloseChat);
        sendBtn.addEventListener('click', this.boundSendMessage);
        input.addEventListener('keypress', this.boundHandleEnterKey);
        modal.addEventListener('click', this.boundHandleModalClick);

        // Kh·ªüi t·∫°o menu t√πy ch·ªçn
        this.initializeOptionsMenu();
    }

    // ===============================================
    // === LOGIC K√âO-TH·∫¢ N√öT FAB (T·ªëi ∆∞u h√≥a) ===
    // ===============================================

    loadFabPosition() {
        const { fab } = this.elements;
        const savedPosition = localStorage.getItem(this.fabPositionStorageKey);

        // ƒê·∫∑t g·ªëc t·ªça ƒë·ªô l√† top/left ƒë·ªÉ transform ho·∫°t ƒë·ªông nh·∫•t qu√°n
        fab.style.top = '0px';
        fab.style.left = '0px';
        fab.style.bottom = 'auto';
        fab.style.right = 'auto';

        if (savedPosition) {
            const { x, y } = JSON.parse(savedPosition);
            this.fabX = x;
            this.fabY = y;
        } else {
            // V·ªã tr√≠ m·∫∑c ƒë·ªãnh ban ƒë·∫ßu (g√≥c d∆∞·ªõi b√™n ph·∫£i)
            this.fabX = window.innerWidth - fab.offsetWidth - 20;
            this.fabY = window.innerHeight - fab.offsetHeight - 95;
        }
        fab.style.transform = `translate3d(${this.fabX}px, ${this.fabY}px, 0)`;
    }

    fabDragStart(e) {
        // Ch·ªâ cho ph√©p chu·ªôt tr√°i ho·∫∑c ch·∫°m
        if (e.button && e.button !== 0) return;

        const { fab, overlay } = this.elements;
        
        // B·∫Øt con tr·ªè v√† hi·ªÉn th·ªã l·ªõp ph·ªß
        fab.setPointerCapture(e.pointerId);
        overlay.style.display = 'block';
        document.body.style.overflow = 'hidden';

        // T·∫Øt hi·ªáu ·ª©ng transition khi ƒëang k√©o
        fab.style.transition = 'none';

        this.isDragging = true;
        this.wasDragged = false;

        // Ghi l·∫°i v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o t∆∞∆°ng ƒë·ªëi so v·ªõi n√∫t
        this.dragStartX = e.clientX - this.fabX;
        this.dragStartY = e.clientY - this.fabY;

        // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p animation
        if (this.animationFrameId) cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragMove(e) {
        if (!this.isDragging) return;
        e.preventDefault(); // NgƒÉn cu·ªôn trang khi k√©o

        const newX = e.clientX - this.dragStartX;
        const newY = e.clientY - this.dragStartY;

        // X√°c ƒë·ªãnh l√† ƒë√£ k√©o n·∫øu di chuy·ªÉn v∆∞·ª£t ng∆∞·ª°ng
        if (!this.wasDragged && (Math.abs(newX - this.fabX) > this.dragThreshold || Math.abs(newY - this.fabY) > this.dragThreshold)) {
            this.wasDragged = true;
            this.elements.fab.classList.add('is-dragging');
            document.body.classList.add('is-dragging-chat');
        }
        
        this.fabX = newX;
        this.fabY = newY;
    }

    updateFabPosition() {
        if (!this.isDragging) return;
        // C·∫≠p nh·∫≠t v·ªã tr√≠ b·∫±ng transform ƒë·ªÉ c√≥ hi·ªáu su·∫•t cao nh·∫•t
        this.elements.fab.style.transform = `translate3d(${this.fabX}px, ${this.fabY}px, 0)`;
        // Ti·∫øp t·ª•c v√≤ng l·∫∑p animation
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragEnd(e) {
        const { fab, overlay } = this.elements;

        // D·ªçn d·∫πp v√† tr·∫£ l·∫°i tr·∫°ng th√°i b√¨nh th∆∞·ªùng
        overlay.style.display = 'none';
        document.body.classList.remove('is-dragging-chat');
        document.body.style.overflow = '';
        fab.classList.remove('is-dragging');

        if (!this.isDragging) return;
        this.isDragging = false;

        // D·ª´ng v√≤ng l·∫∑p animation
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = null;

        try {
            fab.releasePointerCapture(e.pointerId);
        } catch (err) {
            // B·ªè qua l·ªói n·∫øu con tr·ªè ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng
        }
        
        if (this.wasDragged) {
            this.snapFabToEdge();
        } else {
            // N·∫øu kh√¥ng k√©o, ƒë√≥ l√† m·ªôt c√∫ nh·∫•n -> m·ªü chat
            this.openChat();
        }
    }

    snapFabToEdge() {
        const { fab } = this.elements;
        const fabSize = fab.offsetWidth;
        const padding = 20;
        const viewportCenterX = window.innerWidth / 2;
        const navHeight = document.querySelector('.bottom-nav')?.offsetHeight || 85;

        // X√°c ƒë·ªãnh v·ªã tr√≠ cu·ªëi c√πng (tr√°i ho·∫∑c ph·∫£i)
        const finalX = (this.fabX + fabSize / 2 < viewportCenterX)
            ? padding
            : window.innerWidth - fabSize - padding;

        // Gi·ªõi h·∫°n v·ªã tr√≠ theo chi·ªÅu d·ªçc
        const finalY = Math.max(padding, Math.min(this.fabY, window.innerHeight - fabSize - navHeight));

        this.fabX = finalX;
        this.fabY = finalY;

        // Th√™m hi·ªáu ·ª©ng "h√≠t" v√†o c·∫°nh m∆∞·ª£t m√†
        fab.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)';
        fab.style.transform = `translate3d(${this.fabX}px, ${this.fabY}px, 0)`;
        
        localStorage.setItem(this.fabPositionStorageKey, JSON.stringify({ x: this.fabX, y: this.fabY }));

        // X√≥a transition sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            fab.style.transition = '';
        }, 300);
    }

    // ===============================================
    // === LOGIC MODAL & CHAT (Kh√¥ng thay ƒë·ªïi nhi·ªÅu) ===
    // ===============================================

    openChat() {
        const { modal, input } = this.elements;
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.add('visible');
            input.focus();
        }, 10); // Delay nh·ªè ƒë·ªÉ tr√¨nh duy·ªát c√≥ th·ªùi gian render display:flex
    }

    closeChat() {
        const { modal, optionsMenu } = this.elements;
        optionsMenu.classList.remove('visible');
        modal.classList.remove('visible');
        setTimeout(() => {
            modal.style.display = 'none';
        }, 400); // Ch·ªù hi·ªáu ·ª©ng tr∆∞·ª£t xu·ªëng ho√†n t·∫•t
    }

    initializeOptionsMenu() {
        const { optionsBtn, optionsMenu, deleteLogBtn, copyLogBtn } = this.elements;

        optionsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            optionsMenu.classList.toggle('visible');
        });

        deleteLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y kh√¥ng?')) {
                this.chatHistory = [];
                this.saveChatHistory();
                this.renderChatHistory();
                optionsMenu.classList.remove('visible');
                if(window.Utils) Utils.UIUtils.showMessage('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán.', 'success');
            }
        });

        copyLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const conversationText = this.chatHistory.map(msg => `${msg.sender.toUpperCase()}:\n${msg.text}`).join('\n\n');
            navigator.clipboard.writeText(conversationText)
                .then(() => { if(window.Utils) Utils.UIUtils.showMessage('ƒê√£ sao ch√©p cu·ªôc tr√≤ chuy·ªán.', 'success')})
                .catch(() => { if(window.Utils) Utils.UIUtils.showMessage('Kh√¥ng th·ªÉ sao ch√©p.', 'error')});
            optionsMenu.classList.remove('visible');
        });

        // ƒê√≥ng menu khi nh·∫•n ra ngo√†i
        document.addEventListener('click', (e) => {
            if (!optionsMenu.contains(e.target) && !optionsBtn.contains(e.target)) {
                optionsMenu.classList.remove('visible');
            }
        });
    }
    
    handleEnterKey(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
        }
    }

    handleModalClick(e) {
        if (e.target === this.elements.modal) {
            this.closeChat();
        }
    }

    saveChatHistory() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.chatHistory));
        } catch (error) {
            console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ chat:', error);
        }
    }

    loadChatHistory() {
        try {
            const savedHistory = localStorage.getItem(this.storageKey);
            this.chatHistory = savedHistory ? JSON.parse(savedHistory) : [];
        } catch (error) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', error);
            this.chatHistory = [];
        }
        this.renderChatHistory();
    }

    renderChatHistory() {
        this.elements.history.innerHTML = '';
        if (this.chatHistory.length === 0) {
            this.addMessage("Xin ch√†o! B·∫°n ƒë√£ chi ti√™u nh·ªØng g√¨ h√¥m nay? H√£y cho t√¥i bi·∫øt, v√≠ d·ª•: \"c√† ph√™ 50k b·∫±ng ti·ªÅn m·∫∑t\"", 'bot', false);
        } else {
            this.chatHistory.forEach(msg => this.addMessage(msg.text, msg.sender, false));
        }
    }

    addMessage(text, sender, shouldSave = true) {
        if (shouldSave) {
            this.chatHistory.push({ text, sender });
            this.saveChatHistory();
        }
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            // ƒê·ªãnh d·∫°ng markdown c∆° b·∫£n
            let formattedText = text
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>');
            messageDiv.innerHTML = formattedText;
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;

        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;

        const loadingMessage = this.addMessage('', 'loading', false);

        try {
            // === PH·∫¶N N√ÄY L√Ä N∆†I G·ªåI API ƒê·∫æN LLM C·ª¶A B·∫†N ===
            // const aiResponse = await callYourLLMAPI(userInput, this.app.data);
            
            // Gi·∫£ l·∫≠p m·ªôt API call
            setTimeout(() => {
                loadingMessage.remove();
                
                // Ph·∫£n h·ªìi gi·∫£ l·∫≠p t·ª´ AI
                const aiResponse = `ƒê√£ hi·ªÉu:
* **Lo·∫°i:** Chi ti√™u
* **S·ªë ti·ªÅn:** 50,000 ‚Ç´
* **H·∫°ng m·ª•c:** C√† ph√™ (G·ª£i √Ω)
* **T√†i kho·∫£n:** Ti·ªÅn m·∫∑t (G·ª£i √Ω)
* **M√¥ t·∫£:** C√† ph√™`;
                
                this.addMessage(aiResponse, 'bot');

                // K√≠ch ho·∫°t l·∫°i khung nh·∫≠p li·ªáu
                this.elements.input.disabled = false;
                this.elements.sendBtn.disabled = false;
                this.elements.input.focus();
                
            }, 1200); // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ m·∫°ng

        } catch (error) {
            console.error('Error sending message to AI:', error);
            loadingMessage.remove();
            this.addMessage("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", 'bot');
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
        }
    }
}