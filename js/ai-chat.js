/**
 * AI CHAT MODULE - PHI√äN B·∫¢N HO√ÄN CH·ªàNH
 * - K·∫øt h·ª£p CSS `touch-action: none` v√† `passive: false` ƒë·ªÉ gi·∫£i quy·∫øt tri·ªát ƒë·ªÉ xung ƒë·ªôt cu·ªôn trang.
 * - T·ªëi ∆∞u h√≥a logic k√©o th·∫£ cho hi·ªáu nƒÉng cao nh·∫•t tr√™n c·∫£ thi·∫øt b·ªã c·∫£m ·ª©ng v√† m√°y t√≠nh.
 * - Gi·ªØ nguy√™n c√°c ch·ª©c nƒÉng c·ªët l√µi: h√≠t v√†o c·∫°nh, ghi nh·ªõ v·ªã tr√≠, ph√¢n bi·ªát k√©o/nh·∫•n.
 */
class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {};
        this.chatHistory = [];
        this.storageKey = 'ai_chat_history';
        
        // Thu·ªôc t√≠nh cho ch·ª©c nƒÉng k√©o-th·∫£ N√öT FAB
        this.isDraggingFab = false;
        this.wasDragged = false; // C·ªù ƒë·ªÉ ph√¢n bi·ªát k√©o v√† nh·∫•n
        this.dragThreshold = 5; // Ng∆∞·ª°ng pixel ƒë·ªÉ x√°c ƒë·ªãnh l√† h√†nh ƒë·ªông k√©o
        
        this.dragStartX = 0;
        this.dragStartY = 0;
        
        // S·ª≠ d·ª•ng targetX/Y ƒë·ªÉ requestAnimationFrame c·∫≠p nh·∫≠t, tr√°nh layout thrashing
        this.fabTargetX = 0;
        this.fabTargetY = 0;
        
        this.animationFrameId = null;
        this.fabPositionStorageKey = 'ai_chat_fab_position';
    }

    init() {
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            optionsBtn: document.getElementById('ai-chat-options-btn'),
            optionsMenu: document.getElementById('ai-chat-options-menu'),
            deleteLogBtn: document.getElementById('ai-chat-delete-log'),
            copyLogBtn: document.getElementById('ai-chat-copy-log')
        };

        if (!this.elements.fab) return;

        this.loadChatHistory();
        this.loadFabPosition();
        this.initEventListeners();

        console.log('ü§ñ AI Chat Module Initialized (Final Touch-Optimized Version)');
    }

    initEventListeners() {
        const fab = this.elements.fab;

        // S·ª± ki·ªán Pointer Down h·ª£p nh·∫•t cho c·∫£ chu·ªôt v√† ch·∫°m
        fab.addEventListener('pointerdown', (e) => this.fabDragStart(e));
        
        // C√°c s·ª± ki·ªán n√†y ƒë∆∞·ª£c th√™m v√†o `document` ƒë·ªÉ b·∫Øt ƒë∆∞·ª£c chuy·ªÉn ƒë·ªông ngay c·∫£ khi con tr·ªè ra ngo√†i n√∫t
        document.addEventListener('pointermove', (e) => this.fabDragMove(e));
        document.addEventListener('pointerup', (e) => this.fabDragEnd(e));
        
        // C√°c s·ª± ki·ªán kh√°c
        this.elements.closeBtn.addEventListener('click', () => this.closeChat());
        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendMessage(); }
        });
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this.closeChat();
        });
        this.initOptionsMenu();
    }

    loadFabPosition() {
        const fab = this.elements.fab;
        const savedPosition = localStorage.getItem(this.fabPositionStorageKey);
        if (savedPosition) {
            const { x, y } = JSON.parse(savedPosition);
            fab.style.left = `${x}px`;
            fab.style.top = `${y}px`;
        } else {
            // V·ªã tr√≠ m·∫∑c ƒë·ªãnh ban ƒë·∫ßu n·∫øu ch∆∞a c√≥ g√¨ ƒë∆∞·ª£c l∆∞u
            fab.style.left = `${window.innerWidth - fab.offsetWidth - 20}px`;
            fab.style.top = `${window.innerHeight - fab.offsetHeight - 95}px`;
        }
        // X√≥a thu·ªôc t√≠nh bottom/right ƒë·ªÉ ƒë·∫£m b·∫£o top/left ƒë∆∞·ª£c √°p d·ª•ng
        fab.style.bottom = 'auto';
        fab.style.right = 'auto';
    }

    fabDragStart(e) {
        if (e.button && e.button !== 0) return; // Ch·ªâ cho ph√©p k√©o b·∫±ng chu·ªôt tr√°i

        const fab = this.elements.fab;
        fab.setPointerCapture(e.pointerId); // B·∫Øt con tr·ªè, ƒë·∫£m b·∫£o c√°c s·ª± ki·ªán move/up ƒë∆∞·ª£c nh·∫≠n di·ªán
        fab.style.transition = 'none'; // X√≥a hi·ªáu ·ª©ng transition khi b·∫Øt ƒë·∫ßu k√©o
        fab.style.willChange = 'transform'; // B√°o cho tr√¨nh duy·ªát t·ªëi ∆∞u h√≥a transform
        fab.style.cursor = 'grabbing';

        this.isDraggingFab = true;
        this.wasDragged = false;
        
        const rect = fab.getBoundingClientRect();
        // Ghi l·∫°i v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o
        this.dragStartX = e.clientX;
        this.dragStartY = e.clientY;
        
        // Ghi l·∫°i v·ªã tr√≠ ban ƒë·∫ßu c·ªßa n√∫t ƒë·ªÉ t√≠nh to√°n di chuy·ªÉn
        this.fabTargetX = rect.left;
        this.fabTargetY = rect.top;

        // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p animation
        if(this.animationFrameId) cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragMove(e) {
        if (!this.isDraggingFab) return;

        const deltaX = e.clientX - this.dragStartX;
        const deltaY = e.clientY - this.dragStartY;
        
        // Ch·ªâ x√°c nh·∫≠n l√† "ƒë√£ k√©o" n·∫øu di chuy·ªÉn v∆∞·ª£t ng∆∞·ª°ng
        if (!this.wasDragged && (Math.abs(deltaX) > this.dragThreshold || Math.abs(deltaY) > this.dragThreshold)) {
            this.wasDragged = true;
        }
        
        // C·∫≠p nh·∫≠t t·ªça ƒë·ªô ƒë√≠ch d·ª±a tr√™n v·ªã tr√≠ ban ƒë·∫ßu v√† kho·∫£ng c√°ch di chuy·ªÉn
        this.fabTargetX += deltaX;
        this.fabTargetY += deltaY;

        // C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm b·∫Øt ƒë·∫ßu cho l·∫ßn di chuy·ªÉn ti·∫øp theo
        this.dragStartX = e.clientX;
        this.dragStartY = e.clientY;
    }
    
    updateFabPosition() {
        if (!this.isDraggingFab) return;

        const fab = this.elements.fab;
        // S·ª≠ d·ª•ng transform ƒë·ªÉ di chuy·ªÉn s·∫Ω m∆∞·ª£t h∆°n l√† thay ƒë·ªïi top/left
        fab.style.left = `${this.fabTargetX}px`;
        fab.style.top = `${this.fabTargetY}px`;

        // Ti·∫øp t·ª•c v√≤ng l·∫∑p animation
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragEnd(e) {
        if (!this.isDraggingFab) return;

        this.isDraggingFab = false;
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = null;

        const fab = this.elements.fab;
        fab.releasePointerCapture(e.pointerId); // Gi·∫£i ph√≥ng con tr·ªè
        fab.style.willChange = 'auto'; // D·ªçn d·∫πp t·ªëi ∆∞u h√≥a
        fab.style.cursor = 'grab';

        if (this.wasDragged) {
            this.snapFabToEdge();
        } else {
            // N·∫øu kh√¥ng k√©o, ƒë√≥ l√† m·ªôt c√∫ nh·∫•n -> m·ªü chat
            this.openChat();
        }
    }
    
    snapFabToEdge() {
        const fab = this.elements.fab;
        const fabSize = fab.offsetWidth;
        const padding = 20; // Kho·∫£ng c√°ch t·ªõi c·∫°nh m√†n h√¨nh
        const viewportCenterX = window.innerWidth / 2;
        
        // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i sau khi k√©o
        const currentX = this.fabTargetX;
        const finalX = (currentX + fabSize / 2 < viewportCenterX)
            ? padding
            : window.innerWidth - fabSize - padding;

        const finalY = Math.max(padding, Math.min(this.fabTargetY, window.innerHeight - fabSize - padding - 85)); // 85 l√† kho·∫£ng c√°ch cho thanh nav d∆∞·ªõi

        // Th√™m hi·ªáu ·ª©ng "h√≠t" v√†o c·∫°nh m∆∞·ª£t m√†
        fab.style.transition = 'left 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), top 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)';
        fab.style.left = `${finalX}px`;
        fab.style.top = `${finalY}px`;
        
        localStorage.setItem(this.fabPositionStorageKey, JSON.stringify({ x: finalX, y: finalY }));

        // X√≥a transition sau khi hi·ªáu ·ª©ng k·∫øt th√∫c ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng l·∫ßn k√©o sau
        setTimeout(() => {
            fab.style.transition = '';
        }, 300);
    }
    
    openChat() {
        if (!this.elements.modal) return;
        this.elements.modal.style.display = 'flex';
        setTimeout(() => {
            this.elements.modal.classList.add('visible');
            this.elements.input.focus();
        }, 10);
    }

    closeChat() {
        if (!this.elements.modal) return;
        this.elements.optionsMenu.classList.remove('visible');
        this.elements.modal.classList.remove('visible');
        setTimeout(() => {
            this.elements.modal.style.display = 'none';
        }, 400);
    }

    initOptionsMenu() {
        const { optionsBtn, optionsMenu, deleteLogBtn, copyLogBtn } = this.elements;
        if (!optionsBtn || !optionsMenu) return;

        optionsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            optionsMenu.classList.toggle('visible');
        });

        deleteLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y kh√¥ng?')) {
                this.chatHistory = [];
                this.saveChatHistory();
                this.renderChatHistory();
                optionsMenu.classList.remove('visible');
                Utils.UIUtils.showMessage('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán.', 'success');
            }
        });

        copyLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const conversationText = this.chatHistory.map(msg => `${msg.sender.toUpperCase()}:\n${msg.text}`).join('\n\n');
            navigator.clipboard.writeText(conversationText)
                .then(() => Utils.UIUtils.showMessage('ƒê√£ sao ch√©p cu·ªôc tr√≤ chuy·ªán.', 'success'))
                .catch(() => Utils.UIUtils.showMessage('Kh√¥ng th·ªÉ sao ch√©p.', 'error'));
            optionsMenu.classList.remove('visible');
        });

        document.addEventListener('click', (e) => {
            if (!optionsMenu.contains(e.target) && !optionsBtn.contains(e.target)) {
                optionsMenu.classList.remove('visible');
            }
        });
    }

    saveChatHistory() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.chatHistory));
        } catch (error) {
            console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ chat:', error);
        }
    }

    loadChatHistory() {
        try {
            const savedHistory = localStorage.getItem(this.storageKey);
            this.chatHistory = savedHistory ? JSON.parse(savedHistory) : [];
        } catch (error) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', error);
            this.chatHistory = [];
        }
        this.renderChatHistory();
    }

    renderChatHistory() {
        this.elements.history.innerHTML = '';
        if (this.chatHistory.length === 0) {
            this.addMessage("Xin ch√†o! B·∫°n ƒë√£ chi ti√™u nh·ªØng g√¨ h√¥m nay? H√£y cho t√¥i bi·∫øt, v√≠ d·ª•: \"c√† ph√™ 50k b·∫±ng ti·ªÅn m·∫∑t\"", 'bot', false);
        } else {
            this.chatHistory.forEach(msg => this.addMessage(msg.text, msg.sender, false));
        }
    }

    addMessage(text, sender, shouldSave = true) {
        if (shouldSave) {
            this.chatHistory.push({ text, sender });
            this.saveChatHistory();
        }
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            let formattedText = text.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\*(.*?)\*/g, '<em>$1</em>');
            messageDiv.innerHTML = formattedText;
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;
        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;
        const loadingMessage = this.addMessage('', 'loading', false);
        try {
            const { incomeCategories, expenseCategories, accounts } = this.app.data;
            // This is where you would call your actual LLM API
            // const parsedData = await this.callLLMAPI(userInput, ...);
            
            // Simulating an API call with a timeout
            setTimeout(() => {
                loadingMessage.remove();
                
                // Mock response from AI
                const aiResponse = `ƒê√£ hi·ªÉu:
* **Lo·∫°i:** Chi ti√™u
* **S·ªë ti·ªÅn:** 50,000 ‚Ç´
* **H·∫°ng m·ª•c:** C√† ph√™ (G·ª£i √Ω)
* **T√†i kho·∫£n:** Ti·ªÅn m·∫∑t (G·ª£i √Ω)
* **M√¥ t·∫£:** C√† ph√™`;
                
                this.addMessage(aiResponse, 'bot');

                // Re-enable input after response
                this.elements.input.disabled = false;
                this.elements.sendBtn.disabled = false;
                this.elements.input.focus();
                
            }, 1000);

        } catch (error) {
            console.error('Error sending message to AI:', error);
            loadingMessage.remove();
            this.addMessage("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", 'bot');
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
        }
    }
}