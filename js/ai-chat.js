/**
 * AI CHAT MODULE - PHI√äN B·∫¢N T·ªêI ∆ØU CHO C·∫¢M ·ª®NG (IPHONE)
 * - T·ªëi ∆∞u h√≥a k√©o-th·∫£ n√∫t FAB si√™u m∆∞·ª£t b·∫±ng requestAnimationFrame v√† s·ª± ki·ªán touch.
 * - S·ª≠ d·ª•ng "will-change" ƒë·ªÉ tƒÉng t·ªëc ph·∫ßn c·ª©ng (GPU acceleration).
 * - Gi·ªØ nguy√™n c√°c ch·ª©c nƒÉng c·ªët l√µi: h√≠t v√†o c·∫°nh, ghi nh·ªõ v·ªã tr√≠, ph√¢n bi·ªát k√©o/nh·∫•n.
 */
class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {};
        this.chatHistory = [];
        this.storageKey = 'ai_chat_history';
        
        // Thu·ªôc t√≠nh cho ch·ª©c nƒÉng k√©o-th·∫£ N√öT FAB
        this.isDraggingFab = false;
        this.wasDragged = false;
        
        this.dragOffsetX = 0;
        this.dragOffsetY = 0;
        
        // S·ª≠ d·ª•ng targetX/Y ƒë·ªÉ requestAnimationFrame c·∫≠p nh·∫≠t, tr√°nh layout thrashing
        this.fabTargetX = 0;
        this.fabTargetY = 0;
        
        this.animationFrameId = null;
        this.fabPositionStorageKey = 'ai_chat_fab_position';
    }

    init() {
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            optionsBtn: document.getElementById('ai-chat-options-btn'),
            optionsMenu: document.getElementById('ai-chat-options-menu'),
            deleteLogBtn: document.getElementById('ai-chat-delete-log'),
            copyLogBtn: document.getElementById('ai-chat-copy-log')
        };

        if (!this.elements.fab) return;

        this.loadChatHistory();
        this.loadFabPosition();
        this.initEventListeners();

        console.log('ü§ñ AI Chat Module Initialized (Touch-Optimized Draggable FAB)');
    }

    initEventListeners() {
        const fab = this.elements.fab;

        // --- S·ª∞ KI·ªÜN CHO C·∫¢ CHU·ªòT (POINTER) V√Ä C·∫¢M ·ª®NG (TOUCH) ---
        // S·ª≠ d·ª•ng pointer events l√†m m·∫∑c ƒë·ªãnh cho c·∫£ chu·ªôt v√† b√∫t c·∫£m ·ª©ng
        fab.addEventListener('pointerdown', (e) => this.fabDragStart(e));
        document.addEventListener('pointermove', (e) => this.fabDragMove(e));
        document.addEventListener('pointerup', () => this.fabDragEnd());

        // Th√™m s·ª± ki·ªán touch ƒë·ªÉ t·ªëi ∆∞u v√† ngƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh tr√™n iOS
        fab.addEventListener('touchstart', (e) => this.fabDragStart(e), { passive: true });
        fab.addEventListener('touchmove', (e) => this.fabDragMove(e), { passive: false }); // passive: false ƒë·ªÉ preventDefault() ho·∫°t ƒë·ªông
        fab.addEventListener('touchend', () => this.fabDragEnd());
        
        fab.addEventListener('click', () => this.handleFabClick());

        // C√°c s·ª± ki·ªán kh√°c
        this.elements.closeBtn.addEventListener('click', () => this.closeChat());
        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendMessage(); }
        });
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this.closeChat();
        });
        this.initOptionsMenu();
    }

    // --- C√ÅC H√ÄM T·ªêI ∆ØU CHO K√âO-TH·∫¢ ---

    loadFabPosition() {
        const fab = this.elements.fab;
        const savedPosition = localStorage.getItem(this.fabPositionStorageKey);
        if (savedPosition) {
            const { x, y } = JSON.parse(savedPosition);
            fab.style.left = `${x}px`;
            fab.style.top = `${y}px`;
        }
        // X√≥a thu·ªôc t√≠nh bottom/right ƒë·ªÉ ƒë·∫£m b·∫£o top/left ƒë∆∞·ª£c √°p d·ª•ng
        fab.style.bottom = 'auto';
        fab.style.right = 'auto';
    }

    fabDragStart(e) {
        if (e.button && e.button !== 0) return; // Ch·ªâ cho ph√©p k√©o b·∫±ng chu·ªôt tr√°i

        const fab = this.elements.fab;
        fab.style.transition = 'none'; // X√≥a hi·ªáu ·ª©ng transition khi b·∫Øt ƒë·∫ßu k√©o
        fab.style.willChange = 'transform'; // B√°o cho tr√¨nh duy·ªát t·ªëi ∆∞u h√≥a transform

        this.isDraggingFab = true;
        this.wasDragged = false;
        
        const touch = e.touches ? e.touches[0] : e;
        const rect = fab.getBoundingClientRect();
        
        // T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o so v·ªõi v·ªã tr√≠ c·ªßa n√∫t
        this.dragOffsetX = touch.clientX - rect.left;
        this.dragOffsetY = touch.clientY - rect.top;

        // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p animation
        if(this.animationFrameId) cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragMove(e) {
        if (!this.isDraggingFab) return;
        this.wasDragged = true;
        
        // NgƒÉn h√†nh vi cu·ªôn trang m·∫∑c ƒë·ªãnh tr√™n thi·∫øt b·ªã c·∫£m ·ª©ng khi ƒëang k√©o n√∫t
        if (e.cancelable) {
            e.preventDefault();
        }
        
        const touch = e.touches ? e.touches[0] : e;
        
        // Ch·ªâ c·∫≠p nh·∫≠t t·ªça ƒë·ªô ƒë√≠ch, kh√¥ng thay ƒë·ªïi DOM tr·ª±c ti·∫øp ·ªü ƒë√¢y
        this.fabTargetX = touch.clientX - this.dragOffsetX;
        this.fabTargetY = touch.clientY - this.dragOffsetY;
    }
    
    updateFabPosition() {
        if (!this.isDraggingFab) return;

        const fab = this.elements.fab;
        // S·ª≠ d·ª•ng transform ƒë·ªÉ di chuy·ªÉn s·∫Ω m∆∞·ª£t h∆°n l√† thay ƒë·ªïi top/left
        // translate3d √©p tr√¨nh duy·ªát s·ª≠ d·ª•ng GPU
        fab.style.transform = `translate3d(${this.fabTargetX}px, ${this.fabTargetY}px, 0)`;

        // Ti·∫øp t·ª•c v√≤ng l·∫∑p animation
        this.animationFrameId = requestAnimationFrame(() => this.updateFabPosition());
    }

    fabDragEnd() {
        if (!this.isDraggingFab) return;

        this.isDraggingFab = false;
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = null;

        const fab = this.elements.fab;
        fab.style.willChange = 'auto'; // D·ªçn d·∫πp t·ªëi ∆∞u h√≥a

        if (this.wasDragged) {
            // C·∫≠p nh·∫≠t l·∫°i top/left t·ª´ transform tr∆∞·ªõc khi "h√≠t" v√†o c·∫°nh
            const rect = fab.getBoundingClientRect();
            fab.style.transform = ''; // Reset transform
            fab.style.left = `${rect.left}px`;
            fab.style.top = `${rect.top}px`;
            
            this.snapFabToEdge();
        }
    }
    
    snapFabToEdge() {
        const fab = this.elements.fab;
        const fabSize = fab.offsetWidth;
        const padding = 16;
        const viewportCenterX = window.innerWidth / 2;
        
        // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i sau khi k√©o
        const currentX = fab.offsetLeft;
        const finalX = (currentX + fabSize / 2 < viewportCenterX)
            ? padding
            : window.innerWidth - fabSize - padding;

        const finalY = Math.max(padding, Math.min(fab.offsetTop, window.innerHeight - fabSize - padding));

        // Th√™m hi·ªáu ·ª©ng "h√≠t" v√†o c·∫°nh m∆∞·ª£t m√†
        fab.style.transition = 'left 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), top 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)';
        fab.style.left = `${finalX}px`;
        fab.style.top = `${finalY}px`;
        
        localStorage.setItem(this.fabPositionStorageKey, JSON.stringify({ x: finalX, y: finalY }));

        // X√≥a transition sau khi hi·ªáu ·ª©ng k·∫øt th√∫c ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng l·∫ßn k√©o sau
        setTimeout(() => {
            fab.style.transition = '';
        }, 300);
    }

    handleFabClick() {
        // Ch·ªâ m·ªü chat n·∫øu n√∫t kh√¥ng b·ªã k√©o ƒëi
        if (this.wasDragged) return;
        this.openChat();
    }
    
    openChat() {
        if (!this.elements.modal) return;
        this.elements.modal.style.display = 'flex';
        setTimeout(() => {
            this.elements.modal.classList.add('visible');
            this.elements.input.focus();
        }, 10);
    }

    closeChat() {
        if (!this.elements.modal) return;
        this.elements.optionsMenu.classList.remove('visible');
        this.elements.modal.classList.remove('visible');
        setTimeout(() => {
            this.elements.modal.style.display = 'none';
        }, 400);
    }

    initOptionsMenu() {
        const { optionsBtn, optionsMenu, deleteLogBtn, copyLogBtn } = this.elements;
        if (!optionsBtn || !optionsMenu) return;

        optionsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            optionsMenu.classList.toggle('visible');
        });

        deleteLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y kh√¥ng?')) {
                this.chatHistory = [];
                this.saveChatHistory();
                this.renderChatHistory();
                optionsMenu.classList.remove('visible');
                Utils.UIUtils.showMessage('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán.', 'success');
            }
        });

        copyLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const conversationText = this.chatHistory.map(msg => `${msg.sender.toUpperCase()}:\n${msg.text}`).join('\n\n');
            navigator.clipboard.writeText(conversationText)
                .then(() => Utils.UIUtils.showMessage('ƒê√£ sao ch√©p cu·ªôc tr√≤ chuy·ªán.', 'success'))
                .catch(() => Utils.UIUtils.showMessage('Kh√¥ng th·ªÉ sao ch√©p.', 'error'));
            optionsMenu.classList.remove('visible');
        });

        document.addEventListener('click', (e) => {
            if (!optionsMenu.contains(e.target) && !optionsBtn.contains(e.target)) {
                optionsMenu.classList.remove('visible');
            }
        });
    }

    saveChatHistory() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.chatHistory));
        } catch (error) {
            console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ chat:', error);
        }
    }

    loadChatHistory() {
        try {
            const savedHistory = localStorage.getItem(this.storageKey);
            this.chatHistory = savedHistory ? JSON.parse(savedHistory) : [];
        } catch (error) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', error);
            this.chatHistory = [];
        }
        this.renderChatHistory();
    }

    renderChatHistory() {
        this.elements.history.innerHTML = '';
        if (this.chatHistory.length === 0) {
            this.addMessage("Xin ch√†o! B·∫°n ƒë√£ chi ti√™u nh·ªØng g√¨ h√¥m nay? H√£y cho t√¥i bi·∫øt, v√≠ d·ª•: \"c√† ph√™ 50k b·∫±ng ti·ªÅn m·∫∑t\"", 'bot', false);
        } else {
            this.chatHistory.forEach(msg => this.addMessage(msg.text, msg.sender, false));
        }
    }

    addMessage(text, sender, shouldSave = true) {
        if (shouldSave) {
            this.chatHistory.push({ text, sender });
            this.saveChatHistory();
        }
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            let formattedText = text.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\*(.*?)\*/g, '<em>$1</em>');
            messageDiv.innerHTML = formattedText;
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;
        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;
        const loadingMessage = this.addMessage('', 'loading', false);
        try {
            const { incomeCategories, expenseCategories, accounts } = this.app.data;
            // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω g·ªçi ƒë·∫øn API c·ªßa m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn (LLM)
            // V√≠ d·ª•: const parsedData = await this.callLLMAPI(userInput, ...);
            // V√¨ kh√¥ng c√≥ API th·∫≠t, t√¥i s·∫Ω gi·∫£ l·∫≠p m·ªôt ph·∫£n h·ªìi sau 1 gi√¢y.
            
            setTimeout(() => {
                loadingMessage.remove(); // X√≥a tin nh·∫Øn loading
                
                // Gi·∫£ l·∫≠p ph·∫£n h·ªìi t·ª´ AI
                const aiResponse = `ƒê√£ hi·ªÉu:
* **Lo·∫°i:** Chi ti√™u
* **S·ªë ti·ªÅn:** 50,000 ‚Ç´
* **H·∫°ng m·ª•c:** C√† ph√™ (G·ª£i √Ω)
* **T√†i kho·∫£n:** Ti·ªÅn m·∫∑t (G·ª£i √Ω)
* **M√¥ t·∫£:** C√† ph√™`;
                
                this.addMessage(aiResponse, 'bot');

                // Sau khi c√≥ ph·∫£n h·ªìi, b·∫≠t l·∫°i input
                this.elements.input.disabled = false;
                this.elements.sendBtn.disabled = false;
                this.elements.input.focus();
                
            }, 1000);

        } catch (error) {
            console.error('L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn AI:', error);
            loadingMessage.remove();
            this.addMessage("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", 'bot');
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
        }
    }
}
