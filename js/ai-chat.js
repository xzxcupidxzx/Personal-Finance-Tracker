class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            tokenCounter: document.getElementById('ai-chat-token-counter') // Th√™m b·ªô ƒë·∫øm token
        };
        this.chatHistory = []; // L∆∞u tr·ªØ l·ªãch s·ª≠ chat
    }

    init() {
        if (!this.elements.fab) return;
        this.elements.fab.addEventListener('click', () => this.openChat());
        this.elements.closeBtn.addEventListener('click', () => this.closeChat());
        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this.closeChat();
        });
        console.log('ü§ñ AI Chat Module Initialized and Upgraded');
    }

    openChat() {
        if (!this.elements.modal) return;
        this.elements.modal.style.display = 'flex';
        setTimeout(() => {
            this.elements.modal.classList.add('visible');
            this.elements.input.focus();
        }, 10);
    }

    closeChat() {
        if (!this.elements.modal) return;
        this.elements.modal.classList.remove('visible');
        setTimeout(() => {
            this.elements.modal.style.display = 'none';
        }, 400); // Match CSS transition time
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            // S·ª≠ d·ª•ng th∆∞ vi·ªán markdown ƒë·ªÉ render (n·∫øu c√≥) ho·∫∑c x·ª≠ l√Ω xu·ªëng d√≤ng th·ªß c√¥ng
            messageDiv.innerHTML = text.replace(/\n/g, '<br>');
        }
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;

        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;
        const loadingMessage = this.addMessage('', 'loading');

        try {
            // L·∫•y d·ªØ li·ªáu ng·ªØ c·∫£nh
            const incomeCategories = this.app.data.incomeCategories.map(c => c.value);
            const expenseCategories = this.app.data.expenseCategories.map(c => c.value);
            const accounts = this.app.data.accounts.map(a => a.value);

            // G·ªçi API Worker
            const parsedData = await this.callLLMAPI(userInput, incomeCategories, expenseCategories, accounts);

            loadingMessage.remove();

            // ==========================================================
            // === N√ÇNG C·∫§P LOGIC X·ª¨ L√ù PH·∫¢N H·ªíI T·ª™ AI ===
            // ==========================================================

            // 1. Ki·ªÉm tra ph·∫£n h·ªìi c√≥ ph·∫£i l√† m·ªôt m·∫£ng hay kh√¥ng
            if (!Array.isArray(parsedData)) {
                // N·∫øu kh√¥ng ph·∫£i m·∫£ng, c√≥ th·ªÉ AI tr·∫£ l·ªùi c√¢u h·ªèi d·∫°ng vƒÉn b·∫£n
                if (typeof parsedData === 'string' && parsedData.length > 0) {
                     this.addMessage(parsedData, 'bot');
                } else {
                     this.addMessage("‚ùå L·ªói: AI kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng m·∫£ng.", 'bot');
                }
                return; // D·ª´ng x·ª≠ l√Ω
            }

            // 2. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p m·∫£ng r·ªóng (kh√¥ng c√≥ giao d·ªãch n√†o)
            if (parsedData.length === 0) {
                this.addMessage("OK, t√¥i ƒë√£ hi·ªÉu. Kh√¥ng c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th√™m.", 'bot');
                return;
            }

            // 3. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ giao d·ªãch ƒë·ªÉ th√™m
            let confirmationText = `‚úÖ **OK! ƒê√£ ghi nh·∫≠n ${parsedData.length} giao d·ªãch:**\n`;
            let transactionsAdded = 0;

            for (const transaction of parsedData) {
                // Validate t·ª´ng giao d·ªãch
                if (!transaction.type || !transaction.amount || !transaction.account || !transaction.datetime) {
                    confirmationText += `- ‚ö†Ô∏è B·ªè qua 1 giao d·ªãch kh√¥ng h·ª£p l·ªá.\n`;
                    continue;
                }

                confirmationText += `- **${transaction.type}:** ${Utils.CurrencyUtils.formatCurrency(transaction.amount)} cho "${transaction.description || 'N/A'}" v√†o ng√†y ${new Date(transaction.datetime).toLocaleDateString('vi-VN')}\n`;
                
                // ƒê·∫£m b·∫£o h·∫°ng m·ª•c/t√†i kho·∫£n t·ªìn t·∫°i tr∆∞·ªõc khi th√™m
                this.ensureAccountExists(transaction.account);
                if (transaction.type === 'Transfer') {
                    this.ensureAccountExists(transaction.toAccount);
                } else {
                    this.ensureCategoryExists(transaction.category, transaction.type);
                }

                // Th√™m giao d·ªãch v√†o ·ª©ng d·ª•ng
                this.app.addTransaction(transaction);
                transactionsAdded++;
            }

            // 4. Hi·ªÉn th·ªã th√¥ng b√°o t·ªïng h·ª£p v√† l√†m m·ªõi giao di·ªán
            this.addMessage(confirmationText, 'bot');
            
            if (transactionsAdded > 0) {
                this.app.refreshAllModules();
            }

        } catch (error) {
            console.error("L·ªói x·ª≠ l√Ω AI:", error);
            loadingMessage.remove();
            let message = "‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi AI. ";
            if (error && error.message) message += error.message;
            this.addMessage(message, 'bot');
        } finally {
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
            this.elements.input.focus();
        }
    }
    
    ensureAccountExists(accountName) {
        if (!accountName) return;
        const trimmedName = String(accountName).trim();
        if (trimmedName && !this.app.data.accounts.some(acc => acc.value.toLowerCase() === trimmedName.toLowerCase())) {
            this.app.data.accounts.push({ value: trimmedName, text: trimmedName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    ensureCategoryExists(categoryName, type) {
        if (!categoryName) return;
        const trimmedName = String(categoryName).trim();
        const targetArray = type === 'Thu' ? this.app.data.incomeCategories : this.app.data.expenseCategories;
        if (trimmedName && !targetArray.some(cat => cat.value.toLowerCase() === trimmedName.toLowerCase())) {
            targetArray.push({ value: trimmedName, text: trimmedName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    /**
     * G·ªçi API qua Cloudflare Worker proxy
     */
    async callLLMAPI(userInput, incomeCategories, expenseCategories, accounts) {
        // URL worker c·ªßa b·∫°n
        const PROXY_URL = 'https://deepseek.hoangthaison2812.workers.dev';

        const response = await fetch(PROXY_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userInput,
                incomeCategories,
                expenseCategories,
                accounts
            })
        });

        const responseText = await response.text();
        if (!response.ok) {
            // C·ªë g·∫Øng parse l·ªói t·ª´ worker n·∫øu c√≥
            try {
                const errorJson = JSON.parse(responseText);
                throw new Error(errorJson.message || `L·ªói t·ª´ Worker/API (HTTP ${response.status})`);
            } catch (e) {
                throw new Error(responseText || `L·ªói t·ª´ Worker/API (HTTP ${response.status})`);
            }
        }
        
        try {
            // Worker tr·∫£ v·ªÅ chu·ªói JSON, ta c·∫ßn parse n√≥
            return JSON.parse(responseText);
        } catch (err) {
            console.error("L·ªói parse JSON t·ª´ worker:", responseText);
            throw new Error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu JSON tr·∫£ v·ªÅ t·ª´ Worker.");
        }
    }
}
