class AIChatModule {
    constructor(app) {
        this.app = app;
        this.elements = {
            fab: document.getElementById('ai-chat-fab'),
            modal: document.getElementById('ai-chat-modal'),
            closeBtn: document.getElementById('ai-chat-close-btn'),
            history: document.getElementById('ai-chat-history'),
            input: document.getElementById('ai-chat-input'),
            sendBtn: document.getElementById('ai-chat-send-btn'),
            tokenCounter: document.getElementById('ai-chat-token-counter'),
            // TH√äM M·ªöI: C√°c element cho menu t√πy ch·ªçn
            optionsBtn: document.getElementById('ai-chat-options-btn'),
            optionsMenu: document.getElementById('ai-chat-options-menu'),
            deleteLogBtn: document.getElementById('ai-chat-delete-log'),
            copyLogBtn: document.getElementById('ai-chat-copy-log')
        };
        // THAY ƒê·ªîI: Kh·ªüi t·∫°o m·∫£ng chatHistory r·ªóng ban ƒë·∫ßu
        this.chatHistory = [];
        this.storageKey = 'ai_chat_history'; // Key ƒë·ªÉ l∆∞u v√†o localStorage
    }

    init() {
        if (!this.elements.fab) return;
        
        // T·∫£i l·ªãch s·ª≠ chat ƒë√£ l∆∞u
        this.loadChatHistory();
        
        this.elements.fab.addEventListener('click', () => this.openChat());
        this.elements.closeBtn.addEventListener('click', () => this.closeChat());
        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // ƒê√≥ng modal khi click ra ngo√†i
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this.closeChat();
        });

        // TH√äM M·ªöI: X·ª≠ l√Ω s·ª± ki·ªán cho menu t√πy ch·ªçn
        this.initOptionsMenu();

        console.log('ü§ñ AI Chat Module Initialized with History & Options');
    }

    // TH√äM M·ªöI: Kh·ªüi t·∫°o s·ª± ki·ªán cho menu t√πy ch·ªçn
    initOptionsMenu() {
        if (!this.elements.optionsBtn || !this.elements.optionsMenu) return;

        this.elements.optionsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleOptionsMenu();
        });

        this.elements.deleteLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleDeleteLog();
        });

        this.elements.copyLogBtn.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleCopyLog();
        });

        // ƒê√≥ng menu khi click ra ngo√†i
        document.addEventListener('click', (e) => {
            if (!this.elements.optionsMenu.contains(e.target) && !this.elements.optionsBtn.contains(e.target)) {
                this.elements.optionsMenu.classList.remove('visible');
            }
        });
    }

    // TH√äM M·ªöI: B·∫≠t/t·∫Øt menu t√πy ch·ªçn
    toggleOptionsMenu() {
        this.elements.optionsMenu.classList.toggle('visible');
    }
    
    // TH√äM M·ªöI: X·ª≠ l√Ω x√≥a l·ªãch s·ª≠ chat
    handleDeleteLog() {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
            this.chatHistory = [];
            this.saveChatHistory();
            this.renderChatHistory(); // Render l·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i r·ªóng
            this.toggleOptionsMenu(); // ·∫®n menu ƒëi
            Utils.UIUtils.showMessage('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán.', 'success');
        }
    }
    
    // TH√äM M·ªöI: X·ª≠ l√Ω sao ch√©p l·ªãch s·ª≠ chat
    handleCopyLog() {
        const conversationText = this.chatHistory.map(msg => {
            return `${msg.sender.toUpperCase()}:\n${msg.text}`;
        }).join('\n\n');

        navigator.clipboard.writeText(conversationText).then(() => {
            Utils.UIUtils.showMessage('ƒê√£ sao ch√©p cu·ªôc tr√≤ chuy·ªán v√†o clipboard.', 'success');
        }, () => {
            Utils.UIUtils.showMessage('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
        });
        this.toggleOptionsMenu();
    }

    // TH√äM M·ªöI: L∆∞u l·ªãch s·ª≠ chat v√†o localStorage
    saveChatHistory() {
        try {
            const historyToSave = JSON.stringify(this.chatHistory);
            localStorage.setItem(this.storageKey, historyToSave);
        } catch (error) {
            console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ chat:', error);
        }
    }

    // TH√äM M·ªöI: T·∫£i l·ªãch s·ª≠ chat t·ª´ localStorage
    loadChatHistory() {
        try {
            const savedHistory = localStorage.getItem(this.storageKey);
            if (savedHistory) {
                this.chatHistory = JSON.parse(savedHistory);
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', error);
            this.chatHistory = []; // Reset n·∫øu c√≥ l·ªói
        }
        this.renderChatHistory();
    }
    
    // TH√äM M·ªöI: Render to√†n b·ªô l·ªãch s·ª≠ chat ra m√†n h√¨nh
    renderChatHistory() {
        this.elements.history.innerHTML = ''; // X√≥a tin nh·∫Øn c≈©
        if (this.chatHistory.length === 0) {
            // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng m·∫∑c ƒë·ªãnh
            this.addMessage("Xin ch√†o! B·∫°n ƒë√£ chi ti√™u nh·ªØng g√¨ h√¥m nay? H√£y cho t√¥i bi·∫øt, v√≠ d·ª•: \"c√† ph√™ 50k b·∫±ng ti·ªÅn m·∫∑t\"", 'bot', false); // `false` ƒë·ªÉ kh√¥ng l∆∞u l·∫°i tin nh·∫Øn ch√†o m·ª´ng n√†y
        } else {
            this.chatHistory.forEach(msg => {
                this.addMessage(msg.text, msg.sender, false); // `false` ƒë·ªÉ kh√¥ng l∆∞u l·∫°i
            });
        }
    }

    openChat() {
        if (!this.elements.modal) return;
        this.elements.modal.style.display = 'flex';
        setTimeout(() => {
            this.elements.modal.classList.add('visible');
            this.elements.input.focus();
        }, 10);
    }

    closeChat() {
        if (!this.elements.modal) return;
        // ·∫®n menu t√πy ch·ªçn khi ƒë√≥ng modal chat
        this.elements.optionsMenu.classList.remove('visible');
        this.elements.modal.classList.remove('visible');
        setTimeout(() => {
            this.elements.modal.style.display = 'none';
        }, 400); // Match CSS transition time
    }

    // THAY ƒê·ªîI: Th√™m tham s·ªë `shouldSave`
    addMessage(text, sender, shouldSave = true) {
        // N·∫øu `shouldSave` l√† true, th√™m tin nh·∫Øn v√†o m·∫£ng history
        if (shouldSave) {
            this.chatHistory.push({ text, sender });
            this.saveChatHistory(); // L∆∞u l·∫°i ngay l·∫≠p t·ª©c
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-chat-message ${sender}`;
        
        if (sender === 'loading') {
            messageDiv.innerHTML = '<span></span><span></span><span></span>';
        } else {
            // X·ª≠ l√Ω xu·ªëng d√≤ng, ƒë·∫≠m, nghi√™ng ƒë∆°n gi·∫£n
            let formattedText = text.replace(/\n/g, '<br>');
            formattedText = formattedText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            formattedText = formattedText.replace(/\*(.*?)\*/g, '<em>$1</em>');
            messageDiv.innerHTML = formattedText;
        }
        
        this.elements.history.appendChild(messageDiv);
        this.elements.history.scrollTop = this.elements.history.scrollHeight;
        return messageDiv;
    }

    async sendMessage() {
        const userInput = this.elements.input.value.trim();
        if (!userInput) return;

        this.addMessage(userInput, 'user');
        this.elements.input.value = '';
        this.elements.input.disabled = true;
        this.elements.sendBtn.disabled = true;
        const loadingMessage = this.addMessage('', 'loading', false);

        try {
            const incomeCategories = this.app.data.incomeCategories.map(c => c.value);
            const expenseCategories = this.app.data.expenseCategories.map(c => c.value);
            const accounts = this.app.data.accounts.map(a => a.value);
            const parsedData = await this.callLLMAPI(userInput, incomeCategories, expenseCategories, accounts);

            loadingMessage.remove();

            if (!Array.isArray(parsedData)) {
                const responseText = (typeof parsedData === 'string' && parsedData.length > 0) 
                    ? parsedData 
                    : "‚ùå L·ªói: AI kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng m·∫£ng.";
                this.addMessage(responseText, 'bot');
                return;
            }

            if (parsedData.length === 0) {
                this.addMessage("OK, t√¥i ƒë√£ hi·ªÉu. Kh√¥ng c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th√™m.", 'bot');
                return;
            }

            let confirmationText = `‚úÖ **OK! ƒê√£ ghi nh·∫≠n ${parsedData.length} giao d·ªãch:**\n`;
            let transactionsAdded = 0;

            for (const transaction of parsedData) {
                if (!transaction.type || !transaction.amount || !transaction.account || !transaction.datetime) {
                    confirmationText += `- ‚ö†Ô∏è B·ªè qua 1 giao d·ªãch kh√¥ng h·ª£p l·ªá.\n`;
                    continue;
                }

                confirmationText += `- **${transaction.type}:** ${Utils.CurrencyUtils.formatCurrency(transaction.amount)} cho "${transaction.description || 'N/A'}" v√†o ng√†y ${new Date(transaction.datetime).toLocaleDateString('vi-VN')}\n`;
                
                this.ensureAccountExists(transaction.account);
                if (transaction.type === 'Transfer') {
                    this.ensureAccountExists(transaction.toAccount);
                } else {
                    this.ensureCategoryExists(transaction.category, transaction.type);
                }

                this.app.addTransaction(transaction);
                transactionsAdded++;
            }

            this.addMessage(confirmationText, 'bot');
            
            if (transactionsAdded > 0) {
                this.app.refreshAllModules();
            }

        } catch (error) {
            console.error("L·ªói x·ª≠ l√Ω AI:", error);
            loadingMessage.remove();
            let message = "‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi AI. ";
            if (error && error.message) message += error.message;
            this.addMessage(message, 'bot');
        } finally {
            this.elements.input.disabled = false;
            this.elements.sendBtn.disabled = false;
            this.elements.input.focus();
        }
    }
    
    ensureAccountExists(accountName) {
        if (!accountName) return;
        const trimmedName = String(accountName).trim();
        if (trimmedName && !this.app.data.accounts.some(acc => acc.value.toLowerCase() === trimmedName.toLowerCase())) {
            this.app.data.accounts.push({ value: trimmedName, text: trimmedName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    ensureCategoryExists(categoryName, type) {
        if (!categoryName) return;
        const trimmedName = String(categoryName).trim();
        const targetArray = type === 'Thu' ? this.app.data.incomeCategories : this.app.data.expenseCategories;
        if (trimmedName && !targetArray.some(cat => cat.value.toLowerCase() === trimmedName.toLowerCase())) {
            targetArray.push({ value: trimmedName, text: trimmedName, createdAt: new Date().toISOString(), createdBy: 'ai_import' });
        }
    }

    async callLLMAPI(userInput, incomeCategories, expenseCategories, accounts) {
        const PROXY_URL = 'https://deepseek.hoangthaison2812.workers.dev';
        const response = await fetch(PROXY_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userInput,
                incomeCategories,
                expenseCategories,
                accounts
            })
        });
        const responseText = await response.text();
        if (!response.ok) {
            try {
                const errorJson = JSON.parse(responseText);
                throw new Error(errorJson.message || `L·ªói t·ª´ Worker/API (HTTP ${response.status})`);
            } catch (e) {
                throw new Error(responseText || `L·ªói t·ª´ Worker/API (HTTP ${response.status})`);
            }
        }
        try {
            return JSON.parse(responseText);
        } catch (err) {
            console.error("L·ªói parse JSON t·ª´ worker:", responseText);
            throw new Error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu JSON tr·∫£ v·ªÅ t·ª´ Worker.");
        }
    }
}